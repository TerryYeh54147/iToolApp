{"version":3,"file":"static/js/249.9155d828.chunk.js","mappings":"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","sources":["components/flow/DnDContext.tsx","components/flow/NodePickBar.tsx","components/flow/nodes/index.ts","components/flow/nodes/PositionLoggerNode.tsx","components/flow/nodes/ColorSelectorNode.tsx","components/flow/edges/index.ts","components/flow/DnDFlow.tsx","pages/FlowPage.tsx"],"sourcesContent":["import { createContext, useContext, useState } from 'react'\r\nimport type { ParentProps } from '@/types/component'\r\nimport type { nodesType } from '@/components/flow/nodes'\r\nconst DnDContext = createContext(['default', (_: nodesType) => {}])\r\n\r\nexport const DnDProvider = ({ children }: ParentProps) => {\r\n  const [type, setType] = useState<nodesType>('default')\r\n\r\n  return (\r\n    <DnDContext.Provider value={[type, setType]}>\r\n      {children}\r\n    </DnDContext.Provider>\r\n  )\r\n}\r\n\r\nexport default DnDContext\r\n\r\nexport const useDnD = () => {\r\n  return useContext(DnDContext)\r\n}\r\n","import { useDnD } from './DnDContext'\r\nimport { nodesType } from './nodes'\r\n\r\nexport default () => {\r\n  const [_, setType] = useDnD()\r\n  const onDragStart = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    nodeType: nodesType,\r\n  ) => {\r\n    if (typeof setType === 'function') {\r\n      setType(nodeType)\r\n    }\r\n    event.dataTransfer.effectAllowed = 'move'\r\n  }\r\n  const nodeClsName = 'border-2 rounded p-2'\r\n  return (\r\n    <aside className=\"space-y-2\">\r\n      <div className=\"description\">\r\n        You can drag these nodes to the pane on the right.\r\n      </div>\r\n      <div\r\n        className={`${nodeClsName} border-blue-500`}\r\n        onDragStart={(event) => onDragStart(event, 'input')}\r\n        draggable\r\n      >\r\n        Input Node\r\n      </div>\r\n      <div\r\n        className={`${nodeClsName} border-zinc-500`}\r\n        onDragStart={(event) => onDragStart(event, 'color-selector')}\r\n        draggable\r\n      >\r\n        Color Picker\r\n      </div>\r\n      <div\r\n        className={`${nodeClsName} border-pink-500`}\r\n        onDragStart={(event) => onDragStart(event, 'output')}\r\n        draggable\r\n      >\r\n        Output Node\r\n      </div>\r\n    </aside>\r\n  )\r\n}\r\n","import type { Node, NodeTypes, BuiltInNode } from \"@xyflow/react\";\r\nimport { PositionLoggerNode } from \"./PositionLoggerNode\";\r\nimport { ColorSelectorNode } from \"./ColorSelectorNode\";\r\nimport { ChangeEventHandler } from \"react\";\r\n\r\nexport type PositionLoggerNode = Node<\r\n  {\r\n    label?: string;\r\n    color: string;\r\n  } & ColorSelectorNode,\r\n  \"position-logger\"\r\n>;\r\nexport type ColorSelectorNode = Node<\r\n  {\r\n    label?: string;\r\n    color: string;\r\n    onColorChange: ChangeEventHandler<HTMLInputElement> | undefined;\r\n  },\r\n  \"color-selector\"\r\n>;\r\n\r\nexport type AppNode = BuiltInNode | PositionLoggerNode | ColorSelectorNode;\r\n\r\nexport const initialNodes: AppNode[] = [\r\n  // { id: \"a\", type: \"input\", position: { x: 0, y: 0 }, data: { label: \"wire\" } },\r\n  // {\r\n  //   id: \"b\",\r\n  //   type: \"position-logger\",\r\n  //   position: { x: -100, y: 100 },\r\n  //   data: { label: \"drag me!\" },\r\n  // },\r\n  // { id: \"c\", position: { x: 100, y: 100 }, data: { label: \"your ideas\" } },\r\n  // {\r\n  //   id: \"d\",\r\n  //   type: \"output\",\r\n  //   position: { x: 0, y: 200 },\r\n  //   data: { label: \"with React Flow\" },\r\n  // },\r\n];\r\n\r\n// Add any of your custom nodes here!\r\nexport const nodeTypes = {\r\n  \"position-logger\": PositionLoggerNode,\r\n  \"color-selector\": ColorSelectorNode,\r\n} satisfies NodeTypes;\r\nexport type nodesType = keyof typeof nodeTypes | 'input' | 'default' | 'output' ","import { memo } from 'react' // 添加 memo 导入\r\n\r\nimport { Handle, Position, type NodeProps } from '@xyflow/react'\r\n\r\nimport { type PositionLoggerNode as PositionLoggerNodeType } from './'\r\n\r\nexport const PositionLoggerNode = memo(function PositionLoggerNode({\r\n  // 使用 memo 包裹组件\r\n  positionAbsoluteX,\r\n  positionAbsoluteY,\r\n  data,\r\n}: NodeProps<PositionLoggerNodeType>) {\r\n  const x = `${Math.round(positionAbsoluteX)}px`\r\n  const y = `${Math.round(positionAbsoluteY)}px`\r\n\r\n  return (\r\n    // We add this class to use the same styles as React Flow's default nodes.\r\n    <div className=\"react-flow__node-default\">\r\n      {data.label && <div>{data.label}</div>}\r\n\r\n      <div>\r\n        {x} {y}\r\n      </div>\r\n\r\n      <Handle type=\"source\" position={Position.Bottom} />\r\n    </div>\r\n  )\r\n})\r\n","import { memo } from 'react'\r\nimport { Handle, Position, type NodeProps } from '@xyflow/react'\r\nimport { type ColorSelectorNode as ColorSelectorNodeType } from '.'\r\nexport const ColorSelectorNode = memo(\r\n  ({ data, isConnectable }: NodeProps<ColorSelectorNodeType>) => {\r\n    return (\r\n      <div\r\n        className=\"border-zinc-500 border-2 rounded p-2 bg-gray-400\"\r\n      >\r\n        <div className=\"text-wrap text-center\">\r\n          <div className=\"font-bold\"> {data.label}</div>\r\n          <input\r\n            className=\"nodrag\"\r\n            type=\"color\"\r\n            onChange={data.onColorChange}\r\n            defaultValue={data.color}\r\n          />\r\n        </div>\r\n        <Handle\r\n          type=\"source\"\r\n          position={Position.Right}\r\n          id=\"b\"\r\n          style={{ background: '#555' }}\r\n          isConnectable={isConnectable}\r\n        />\r\n      </div>\r\n    )\r\n  },\r\n)\r\n","import type { Edge, EdgeTypes } from \"@xyflow/react\";\r\n\r\nexport const initialEdges = [\r\n    { id: \"a->c\", source: \"a\", target: \"c\", animated: true },\r\n    { id: \"b->d\", source: \"b\", target: \"d\" },\r\n    { id: \"c->d\", source: \"c\", target: \"d\", animated: true },\r\n] satisfies Edge[];\r\n\r\nexport const edgeTypes = {\r\n    // Add your custom edge types here!\r\n} satisfies EdgeTypes;\r\n","// Drag and drop flow\r\nimport { useRef, ChangeEvent, useCallback, useEffect, useState } from 'react'\r\nimport {\r\n  Background,\r\n  Controls,\r\n  MiniMap,\r\n  ReactFlow,\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  type OnConnect,\r\n  useReactFlow,\r\n} from '@xyflow/react'\r\n\r\nimport NodePickBar from './NodePickBar'\r\nimport { useDnD } from './DnDContext'\r\nimport { AppNode, initialNodes, nodeTypes } from '@/components/flow/nodes'\r\nimport { initialEdges, edgeTypes } from '@/components/flow/edges'\r\nimport { isDarkModeState } from '@/stores/theme'\r\n\r\nlet id = 0\r\nconst getId = () => `dndnode_${id++}`\r\n\r\nexport default function DnDFlow() {\r\n  const reactFlowWrapper = useRef(null)\r\n\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes)\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([])\r\n  const { screenToFlowPosition } = useReactFlow()\r\n  const [type, _] = useDnD()\r\n\r\n  const onConnect: OnConnect = useCallback(\r\n    (connection) => setEdges((edges) => addEdge(connection, edges)),\r\n    [setEdges],\r\n  )\r\n  const onDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault()\r\n    event.dataTransfer.dropEffect = 'move'\r\n  }, [])\r\n\r\n  const onDrop = useCallback(\r\n    (event: React.DragEvent<HTMLDivElement>) => {\r\n      event.preventDefault()\r\n\r\n      // check if the dropped element is valid\r\n      if (!type) {\r\n        return\r\n      }\r\n\r\n      // project was renamed to screenToFlowPosition\r\n      // and you don't need to subtract the reactFlowBounds.left/top anymore\r\n      // details: https://reactflow.dev/whats-new/2023-11-10\r\n      const position = screenToFlowPosition({\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n      })\r\n      const newNode = {\r\n        id: getId(),\r\n        type,\r\n        position,\r\n        data: {\r\n          label: `${type} node`,\r\n          color: bgColor,\r\n          onColorChange: onColorChange,\r\n        },\r\n      }\r\n\r\n      setNodes((nodes) => [...nodes, newNode as AppNode])\r\n    },\r\n    [screenToFlowPosition, type],\r\n  )\r\n\r\n  const [bgColor, setBgColor] = useState('#ffffff')\r\n  const onColorChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const color = event.target.value\r\n    setBgColor(color)\r\n    setNodes((nodes) =>\r\n      nodes.map((node) => {\r\n        if (node.type === 'color-selector') {\r\n          return { ...node, data: { ...node.data, color } }\r\n        }\r\n        return node\r\n      }),\r\n    )\r\n  }\r\n  useEffect(() => {\r\n    let nodes = [\r\n      ...initialNodes,\r\n      {\r\n        id: 'e',\r\n        type: 'color-selector',\r\n        position: { x: 150, y: 200 },\r\n        data: {\r\n          label: 'Color Picker',\r\n          color: bgColor,\r\n          onColorChange: onColorChange,\r\n        },\r\n      },\r\n    ] satisfies AppNode[]\r\n    setNodes(nodes)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        id=\"dndFlow\"\r\n        className=\"flex flex-row flex-wrap-reverse md:flex-nowrap\"\r\n      >\r\n        <div className=\"place-center w-full h-[84dvh]\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            colorMode={isDarkModeState ? 'dark' : 'light'}\r\n            nodes={nodes}\r\n            nodeTypes={nodeTypes}\r\n            onNodesChange={onNodesChange}\r\n            edges={edges}\r\n            edgeTypes={edgeTypes}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            fitView\r\n          >\r\n            <Background />\r\n            <MiniMap\r\n              nodeStrokeColor={(n) => {\r\n                if (n.type === 'input') return '#0041d0'\r\n                if (n.type === 'output') return '#ff0072'\r\n                return '#000000'\r\n              }}\r\n              nodeColor={(n) => {\r\n                if (n.type === 'color-selector') return n.data?.color as string\r\n                return '#fff'\r\n              }}\r\n            />\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n        <div className=\"border-4 p-2 w-full md:max-w-fit\">\r\n          <NodePickBar />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { ReactFlowProvider } from '@xyflow/react'\r\nimport { DnDProvider } from '@/components/flow/DnDContext'\r\nimport DnDFlow from '@/components/flow/DnDFlow'\r\nimport '@xyflow/react/dist/style.css'\r\n\r\nexport default () => (\r\n  <ReactFlowProvider>\r\n    <DnDProvider>\r\n      <DnDFlow />\r\n    </DnDProvider>\r\n  </ReactFlowProvider>\r\n)\r\n"],"names":["DnDContext","createContext","_","DnDProvider","_ref","children","type","setType","useState","_jsx","Provider","value","useDnD","useContext","onDragStart","event","nodeType","dataTransfer","effectAllowed","nodeClsName","_jsxs","className","draggable","initialNodes","nodeTypes","memo","positionAbsoluteX","positionAbsoluteY","data","x","Math","round","y","label","Handle","position","Position","Bottom","isConnectable","onChange","onColorChange","defaultValue","color","Right","id","style","background","edgeTypes","DnDFlow","reactFlowWrapper","useRef","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","screenToFlowPosition","useReactFlow","onConnect","useCallback","connection","addEdge","onDragOver","preventDefault","dropEffect","onDrop","clientX","clientY","newNode","bgColor","setBgColor","target","map","node","useEffect","_Fragment","ref","ReactFlow","colorMode","isDarkModeState","fitView","Background","MiniMap","nodeStrokeColor","n","nodeColor","_n$data","Controls","NodePickBar","ReactFlowProvider"],"sourceRoot":""}