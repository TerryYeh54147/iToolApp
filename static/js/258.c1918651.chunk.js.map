{"version":3,"file":"static/js/258.c1918651.chunk.js","mappings":"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","sources":["pages/PaintPage.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { Stage, Layer, Rect, Circle, Line } from 'react-konva'\r\nimport { saveAs } from 'file-saver'\r\nimport {\r\n  IconButton,\r\n  Slider,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  Snackbar,\r\n  Fade,\r\n} from '@mui/material'\r\nimport {\r\n  DrawTwoTone,\r\n  Opacity,\r\n  DriveFileRenameOutline,\r\n  CropDin,\r\n  RadioButtonUnchecked,\r\n  Rectangle,\r\n  Undo,\r\n  Redo,\r\n  RestartAlt,\r\n  Save,\r\n} from '@mui/icons-material'\r\nimport { TransitionProps } from '@mui/material/transitions'\r\n\r\nexport interface SnackbarInfo {\r\n  isOpen: false\r\n  msg: string\r\n  autoHideDuration?: number\r\n  Transition?: React.ComponentType<\r\n    TransitionProps & {\r\n      children: React.ReactElement<any, any>\r\n    }\r\n  >\r\n}\r\nexport type BrashToolType = 'pen' | 'rect' | 'line' | 'circle' | 'eraser'\r\nconst PaintApp: React.FC = () => {\r\n  const [tool, setTool] = useState<BrashToolType>('pen')\r\n  const [elements, setElements] = useState<any[]>([])\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n  const [strokeColor, setStrokeColor] = useState('#000000')\r\n  const [strokeWidth, setStrokeWidth] = useState(5)\r\n  const [opacity, setOpacity] = useState(1)\r\n  const stageRef = useRef<any>(null)\r\n  const [history, setHistory] = useState<any[]>([])\r\n  const [redoStack, setRedoStack] = useState<any[]>([])\r\n  const [canvasImage, setCanvasImage] = useState<HTMLImageElement | null>(null)\r\n  // TODO:\r\n  // const [snackbarInfo, setSnackbarInfo] = useState<SnackbarInfo>({\r\n  //   isOpen: false,\r\n  //   msg: '',\r\n  //   autoHideDuration: 3000,\r\n  //   Transition: Fade,\r\n  // })\r\n  // function handleSnackbarOpen(msg: string) {\r\n\r\n  // }\r\n  // function handleSnackbarClose() {\r\n  //   snackbarInfo.isOpen = false\r\n  //   snackbarInfo.msg = ''\r\n  // }\r\n\r\n  const handleBrashTool = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    val: BrashToolType | null,\r\n  ) => {\r\n    if (val != null) {\r\n      setTool(val)\r\n    }\r\n  }\r\n\r\n  const handleMouseDown = (e: any) => {\r\n    setIsDrawing(true)\r\n    const pos = e.target.getStage().getPointerPosition()\r\n    const newElement: any = {\r\n      tool,\r\n      strokeColor,\r\n      strokeWidth,\r\n      opacity,\r\n      points: [pos.x, pos.y],\r\n    }\r\n\r\n    setElements([...elements, newElement])\r\n  }\r\n\r\n  const handleMouseMove = (e: any) => {\r\n    if (!isDrawing) return\r\n\r\n    const stage = e.target.getStage()\r\n    const point = stage.getPointerPosition()\r\n    let lastElement = elements[elements.length - 1]\r\n\r\n    if (tool === 'pen' || tool === 'eraser') {\r\n      lastElement.points = lastElement.points.concat([point.x, point.y])\r\n    } else {\r\n      const [x0, y0] = lastElement.points\r\n      lastElement.points = [x0, y0, point.x, point.y]\r\n    }\r\n\r\n    elements.splice(elements.length - 1, 1, lastElement)\r\n    setElements(elements.concat())\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false)\r\n    setHistory([...history, elements])\r\n  }\r\n\r\n  const handleUndo = () => {\r\n    const newHistory = [...history]\r\n    const lastState = newHistory.pop()\r\n    setRedoStack([...redoStack, elements])\r\n    setElements(lastState || [])\r\n    setHistory(newHistory)\r\n  }\r\n\r\n  const handleRedo = () => {\r\n    if (redoStack.length === 0) return\r\n    const newRedoStack = [...redoStack]\r\n    const lastRedo = newRedoStack.pop()\r\n    setHistory([...history, elements])\r\n    setElements(lastRedo)\r\n    setRedoStack(newRedoStack)\r\n  }\r\n\r\n  const handleClear = () => {\r\n    setElements([])\r\n    setHistory([])\r\n    setRedoStack([])\r\n  }\r\n\r\n  const handleSave = () => {\r\n    if (window.confirm('Do you wanna download your masterpiece?')) {\r\n      stageRef.current.toImage({\r\n        callback(image: HTMLImageElement) {\r\n          const dataURL = image.src\r\n          const blob = dataURLToBlob(dataURL)\r\n          saveAs(blob, 'drawing.png')\r\n        },\r\n      })\r\n    } else {\r\n      // TODO:\r\n      // handleSnackbarOpen('Keep enjoy your painint ~')\r\n    }\r\n  }\r\n\r\n  const handleImportImage = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0]\r\n    if (file) {\r\n      const reader = new FileReader()\r\n      reader.onload = function (event) {\r\n        const image = new window.Image()\r\n        image.src = event.target?.result as string\r\n        image.onload = function () {\r\n          setCanvasImage(image)\r\n        }\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n  }\r\n\r\n  const dataURLToBlob = (dataURL: string) => {\r\n    const parts = dataURL.split(';base64,')\r\n    const contentType = parts[0].split(':')[1]\r\n    const raw = window.atob(parts[1])\r\n    const rawLength = raw.length\r\n    const uInt8Array = new Uint8Array(rawLength)\r\n\r\n    for (let i = 0; i < rawLength; ++i) {\r\n      uInt8Array[i] = raw.charCodeAt(i)\r\n    }\r\n\r\n    return new Blob([uInt8Array], { type: contentType })\r\n  }\r\n\r\n  const drawElement = (el: any, key: number) => {\r\n    switch (el.tool) {\r\n      case 'pen':\r\n        return (\r\n          <Line\r\n            key={key}\r\n            points={el.points}\r\n            stroke={el.strokeColor}\r\n            strokeWidth={el.strokeWidth}\r\n            opacity={el.opacity}\r\n          />\r\n        )\r\n      case 'eraser':\r\n        return (\r\n          <Line\r\n            key={key}\r\n            points={el.points}\r\n            stroke=\"#FFFFFF\"\r\n            strokeWidth={el.strokeWidth}\r\n            opacity={el.opacity}\r\n          />\r\n        )\r\n      case 'rect':\r\n        const [x0, y0, x1, y1] = el.points\r\n        return (\r\n          <Rect\r\n            key={key}\r\n            x={Math.min(x0, x1)}\r\n            y={Math.min(y0, y1)}\r\n            width={Math.abs(x1 - x0)}\r\n            height={Math.abs(y1 - y0)}\r\n            stroke={el.strokeColor}\r\n            strokeWidth={el.strokeWidth}\r\n            opacity={el.opacity}\r\n          />\r\n        )\r\n      case 'circle':\r\n        const [cx0, cy0, cx1, cy1] = el.points\r\n        const radius = Math.hypot(cx1 - cx0, cy1 - cy0)\r\n        return (\r\n          <Circle\r\n            key={key}\r\n            x={cx0}\r\n            y={cy0}\r\n            radius={radius}\r\n            stroke={el.strokeColor}\r\n            strokeWidth={el.strokeWidth}\r\n            opacity={el.opacity}\r\n          />\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"tools\" className=\"grid grid-row-3 border p-4\">\r\n        <div id=\"brash-tools\" className=\"pb-4\">\r\n          <ToggleButtonGroup\r\n            value={tool}\r\n            color=\"primary\"\r\n            exclusive\r\n            onChange={handleBrashTool}\r\n            aria-label=\"Brash Tools\"\r\n          >\r\n            <ToggleButton value=\"pen\" aria-label=\"pen\">\r\n              <DrawTwoTone />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"rect\" aria-label=\"rect\">\r\n              <CropDin />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"circle\" aria-label=\"circle\">\r\n              <RadioButtonUnchecked />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"eraser\" aria-label=\"eraser\">\r\n              <Rectangle className=\"-rotate-45\" />\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </div>\r\n        <div id=\"brash-setting\" className=\"flex flex-wrap gap-1 justify-around\">\r\n          <div className=\"w-1/12\">\r\n            <input\r\n              type=\"color\"\r\n              value={strokeColor}\r\n              onChange={(e) => setStrokeColor(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"w-5/12 grid grid-cols-12\">\r\n            <DriveFileRenameOutline />\r\n            <Slider\r\n              className=\"col-span-11\"\r\n              min={1}\r\n              max={10}\r\n              value={strokeWidth}\r\n              onChange={(e, value) => setStrokeWidth(value as number)}\r\n            />\r\n          </div>\r\n          <div className=\"w-5/12 grid grid-cols-12\">\r\n            <Opacity />\r\n            <Slider\r\n              className=\"col-span-11\"\r\n              min={0.1}\r\n              max={1}\r\n              step={0.1}\r\n              value={opacity}\r\n              onChange={(e, value) => setOpacity(value as number)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div id=\"action-tools\" className=\"flex flex-wrap gap-2\">\r\n          <IconButton onClick={handleUndo}>\r\n            <Undo />\r\n          </IconButton>\r\n          <IconButton onClick={handleRedo}>\r\n            <Redo />\r\n          </IconButton>\r\n          <IconButton onClick={handleClear}>\r\n            <RestartAlt />\r\n          </IconButton>\r\n          <IconButton onClick={handleSave}>\r\n            <Save />\r\n          </IconButton>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            <div>import background image...</div>\r\n            <input\r\n              type=\"file\"\r\n              onChange={handleImportImage}\r\n              className=\"col-span-11\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Stage\r\n        className=\"border mt-4 hover:cursor-crosshair\"\r\n        width={window.innerWidth}\r\n        height={window.innerHeight}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseDown={handleMouseDown}\r\n        onTouchStart={handleMouseMove}\r\n        onTouchEnd={handleMouseDown}\r\n        onMouseUp={handleMouseUp}\r\n        ref={stageRef}\r\n      >\r\n        <Layer>\r\n          {canvasImage && (\r\n            <Rect\r\n              x={0}\r\n              y={0}\r\n              width={window.innerWidth}\r\n              height={window.innerHeight}\r\n              fillPatternImage={canvasImage}\r\n              fillPatternScale={{\r\n                x: window.innerWidth / canvasImage.width,\r\n                y: window.innerHeight / canvasImage.height,\r\n              }}\r\n            />\r\n          )}\r\n          {elements.map((el, i) => drawElement(el, i))}\r\n        </Layer>\r\n      </Stage>\r\n      {/* TODO: <Snackbar\r\n        open={snackbarInfo.isOpen}\r\n        onClose={handleSnackbarClose}\r\n        TransitionComponent={snackbarInfo.Transition}\r\n        message={snackbarInfo.msg}\r\n        key={snackbarInfo.Transition?.name}\r\n        autoHideDuration={1200}\r\n      /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PaintApp\r\n"],"names":["PaintApp","tool","setTool","useState","elements","setElements","isDrawing","setIsDrawing","strokeColor","setStrokeColor","strokeWidth","setStrokeWidth","opacity","setOpacity","stageRef","useRef","history","setHistory","redoStack","setRedoStack","canvasImage","setCanvasImage","handleMouseDown","e","pos","target","getStage","getPointerPosition","newElement","points","x","y","handleMouseMove","point","lastElement","length","concat","x0","y0","splice","dataURLToBlob","dataURL","parts","split","contentType","raw","window","atob","rawLength","uInt8Array","Uint8Array","i","charCodeAt","Blob","type","_jsxs","children","id","className","_jsx","ToggleButtonGroup","value","color","exclusive","onChange","handleBrashTool","event","val","ToggleButton","DrawTwoTone","CropDin","RadioButtonUnchecked","Rectangle","DriveFileRenameOutline","Slider","min","max","Opacity","step","IconButton","onClick","handleUndo","newHistory","lastState","pop","Undo","handleRedo","newRedoStack","lastRedo","Redo","handleClear","RestartAlt","handleSave","confirm","current","toImage","callback","image","src","blob","saveAs","Save","_e$target$files","file","files","reader","FileReader","onload","_event$target","Image","result","readAsDataURL","Stage","width","innerWidth","height","innerHeight","onMouseMove","onMouseDown","onTouchStart","onTouchEnd","onMouseUp","handleMouseUp","ref","Layer","Rect","fillPatternImage","fillPatternScale","map","el","drawElement","key","Line","stroke","x1","y1","Math","abs","cx0","cy0","cx1","cy1","radius","hypot","Circle"],"sourceRoot":""}